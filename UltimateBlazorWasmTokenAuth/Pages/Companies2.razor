@page "/companies2"

@inject TokenAuthenticationStateProvider TokenProvider
@inject IAuthenticationService AuthenticationService
@inject IRepositoryManager repositoryManager

@attribute [Authorize]

<PageTitle>Companies</PageTitle>

<h1>Companies</h1>

<NewCompany />
<button class="btn btn-primary" @onclick="() => LoadData()">Refresh</button>


<br />

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (companies == null)
{
    <p><em>@errorMessage</em></p>
}
else
{
    <table class="table table-responsive table-striped table-hover table-bordered">
        <thead class="thead-light">
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Address</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var company in companies)
            {
                <tr>
                    <td>@company.Id</td>
                    <td>@company.Name</td>
                    <td>@company.FullAddress</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<CompanyDto>? companies;
    private HttpResponseMessage? message;
    private string errorMessage = "";
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;

        try
        {
            (message, companies) = await repositoryManager.Company.GetCompaniesAsync();

            if (!message.IsSuccessStatusCode)
            {
                errorMessage = $"Error occurred: {message.ReasonPhrase} (Status code: {message.StatusCode})";
                companies = null; // Ensure UI knows to show error message
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            companies = null;
        }
        finally
        {
            isLoading = false;
        }

    }

}
