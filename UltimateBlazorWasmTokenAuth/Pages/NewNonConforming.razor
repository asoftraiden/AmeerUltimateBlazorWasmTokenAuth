@page "/nonconforming"
@inject IRepositoryManager RepositoryManager
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <EditForm Model="@nonConformingForCreation" OnValidSubmit="Submit" novalidate>
        <DataAnnotationsValidator/>
        <MudCard Elevation="2">
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudIcon Icon="@Icons.Material.Filled.Assignment" Color="Color.Primary"/>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Create Nonconforming Entry</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                @if (isLoading)
                {
                    <MudOverlay Visible="true" DarkBackground="true">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large"/>
                    </MudOverlay>
                }
                <MudGrid Spacing="2">
                    <!-- Basic Info Section -->
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="nonConformingForCreation.DetectedBy"
                                      Label="Detected By" Required="true"
                                      Variant="Variant.Filled" Margin="Margin.Dense"
                                      Immediate="true"/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker @bind-Date="nonConformingForCreation.DetectionDate"
                                       Label="Detection Date" Required="true"
                                       Variant="Variant.Filled" Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudDivider Class="my-2"/>
                        <MudText Typo="Typo.subtitle2" Color="Color.Primary" Class="mb-2">Issue Details</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="nonConformingForCreation.Description"
                                      Label="Description" Required="true"
                                      Variant="Variant.Filled" Lines="2"
                                      Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="nonConformingForCreation.Status"
                                   Label="Status" Required="true"
                                   Variant="Variant.Filled" Margin="Margin.Dense">
                            @foreach (var status in new[] { "Open", "UnderInvestigation", "PendingDisposition", "Rejected", "Reworked", "Scrapped", "Closed" })
                            {
                                <MudSelectItem Value="@status">
                                    @status
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="nonConformingForCreation.Type"
                                   Label="Type" Required="true"
                                   Variant="Variant.Filled" Margin="Margin.Dense">
                            @foreach (var type in new[] { "Dimensional", "Visual", "Functional", "Documentation", "Documentation", "Packaging", "Other" })
                            {
                                <MudSelectItem Value="@type">@type</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudDivider Class="my-2"/>
                        <MudText Typo="Typo.subtitle2" Color="Color.Primary" Class="mb-2">Product Information</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudAutocomplete T="PartDto"
                                         Label="Part" Required="true"
                                         ValueChanged="@OnPartSelected"
                                         SearchFunc="@SearchParts"
                                         ToStringFunc="@(part => part?.PartNumber ?? string.Empty)"
                                         Variant="Variant.Filled" Margin="Margin.Dense"
                                         AdornmentIcon="@Icons.Material.Filled.Search">
                            <ItemTemplate Context="part">
                                <MudText><strong>@part.PartNumber</strong> - @part.Description</MudText>
                            </ItemTemplate>
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudAutocomplete T="CellDto"
                                         Label="Cell" Required="true"
                                         ValueChanged="@OnCellSelected"
                                         SearchFunc="@SearchCells"
                                         ToStringFunc="@(cell => cell?.Description ?? string.Empty)"
                                         Variant="Variant.Filled" Margin="Margin.Dense"
                                         AdornmentIcon="@Icons.Material.Filled.Search">
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudAutocomplete T="ModelDto"
                                         Label="Model" Required="true"
                                         ValueChanged="@OnModelSelected"
                                         SearchFunc="@SearchModels"
                                         ToStringFunc="@(model => model?.Description ?? string.Empty)"
                                         Variant="Variant.Filled" Margin="Margin.Dense"
                                         AdornmentIcon="@Icons.Material.Filled.Search">
                        </MudAutocomplete>
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudNumericField @bind-Value="nonConformingForCreation.QuantityAffected"
                                         Label="Quantity Affected" Required="true"
                                         Variant="Variant.Filled" Min="1"
                                         Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudDivider Class="my-2"/>
                        <MudText Typo="Typo.subtitle2" Color="Color.Primary" Class="mb-2">Analysis</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="nonConformingForCreation.RootCause"
                                      Label="Root Cause" Required="true"
                                      Variant="Variant.Filled" Lines="2"
                                      Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSwitch T="bool" @bind-Checked="nonConformingForCreation.RequiresCustomerNotification"
                                   Color="Color.Primary"
                                   Label="Requires Customer Notification"/>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
            <MudCardActions Class="pa-4 justify-end">
                <MudTooltip Text="Reset form to default values">
                    <MudIconButton Icon="@Icons.Material.Filled.RestartAlt"
                                   Color="Color.Default"
                                   OnClick="Reset"
                                   Disabled="@isLoading"/>
                </MudTooltip>
                <MudButton ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           DisableElevation="true"
                           Disabled="@isLoading"
                           StartIcon="@Icons.Material.Filled.Save">
                    @if (isLoading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText>Submit</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudContainer>

@code {
    private NonConformingForCreationDto nonConformingForCreation = new()
    {
        Status = "Open",
        DetectionDate = DateTime.Now,
    };
    private bool isLoading;
    private Timer _debouncePartsTimer;
    private Timer _debounceCellsTimer;
    private Timer _debounceModelsTimer;
    private const int DebounceDelay = 300; // 300ms delay
    private void OnPartSelected(PartDto selectedPart)
    {
        nonConformingForCreation.PartId = selectedPart.Id; // Assuming your DTO has PartId property
    }
    private void OnCellSelected(CellDto selectedCell)
    {
        nonConformingForCreation.CellId = selectedCell.Id; // Assuming your DTO has PartId property
    }
    private void OnModelSelected(ModelDto selectedModel)
    {
        nonConformingForCreation.ModelId = selectedModel.Id; // Assuming your DTO has PartId property
    }
    private async Task Submit()
    {
        try
        {
            isLoading = true;
            var (response, createdNonConforming, errors) = await RepositoryManager.NonConforming
                .CreateNonConformingAsync(nonConformingForCreation);

            if (response.IsSuccessStatusCode && createdNonConforming != null)
            {
                Snackbar.Add("Nonconforming entry created successfully!", Severity.Success);
                // Reset form or navigate away
                nonConformingForCreation = new()
                {
                    Status = "Open",
                    DetectionDate = DateTime.Now,
                };
            }
            else
            {
                if (errors != null && errors.Any())
                {
                    foreach (var error in errors)
                    {
                        Snackbar.Add($"{error.Key}: {error.Value}", Severity.Error);
                    }
                }
                else
                {
                    Snackbar.Add("Failed to create nonconforming entry. Please try again.", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void Reset()
    {
        // Add navigation logic here if needed
        nonConformingForCreation = new()
        {
            Status = "Open",
            DetectionDate = DateTime.Now,
        };
    }

    private async Task<IEnumerable<PartDto>> SearchParts(string searchTerm, CancellationToken cancellationToken)
    {
        return await DebouncedSearchParts(searchTerm);
    }

    private async Task<IEnumerable<PartDto>> DebouncedSearchParts(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return new List<PartDto>();

        var tcs = new TaskCompletionSource<IEnumerable<PartDto>>();

        _debouncePartsTimer?.Dispose();
        _debouncePartsTimer = new Timer(async _ =>
        {
            try
            {
                var (response, parts, _) = await RepositoryManager.Part.GetPartsAsync(1, 10, searchTerm);
                if (response.IsSuccessStatusCode && parts != null)
                {
                    tcs.SetResult(parts);
                }
                else
                {
                    await InvokeAsync(() => Snackbar.Add("Failed to search parts. Please try again.", Severity.Error));
                    tcs.SetResult(new List<PartDto>());
                }
            }
            catch (Exception ex)
            {
                await InvokeAsync(() => Snackbar.Add($"Error searching users: {ex.Message}", Severity.Error));
                tcs.SetResult(new List<PartDto>());
            }
        }, null, DebounceDelay, Timeout.Infinite);

        return await tcs.Task;
    }

    private async Task<IEnumerable<CellDto>> SearchCells(string searchTerm, CancellationToken cancellationToken)
    {
        return await DebouncedSearchCells(searchTerm);
    }

    private async Task<IEnumerable<CellDto>> DebouncedSearchCells(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return new List<CellDto>();

        var tcs = new TaskCompletionSource<IEnumerable<CellDto>>();

        _debounceCellsTimer?.Dispose();
        _debounceCellsTimer = new Timer(async _ =>
        {
            try
            {
                var (response, cells, _) = await RepositoryManager.Cell.GetCellsAsync(1, 10, searchTerm);
                if (response.IsSuccessStatusCode && cells != null)
                {
                    tcs.SetResult(cells);
                }
                else
                {
                    await InvokeAsync(() => Snackbar.Add("Failed to search cells. Please try again.", Severity.Error));
                    tcs.SetResult(new List<CellDto>());
                }
            }
            catch (Exception ex)
            {
                await InvokeAsync(() => Snackbar.Add($"Error searching cells: {ex.Message}", Severity.Error));
                tcs.SetResult(new List<CellDto>());
            }
        }, null, DebounceDelay, Timeout.Infinite);

        return await tcs.Task;
    }

    private async Task<IEnumerable<ModelDto>> SearchModels(string searchTerm, CancellationToken cancellationToken)
    {
        return await DebouncedSearchModels(searchTerm);
    }

    private async Task<IEnumerable<ModelDto>> DebouncedSearchModels(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
            return new List<ModelDto>();

        var tcs = new TaskCompletionSource<IEnumerable<ModelDto>>();

        _debounceModelsTimer?.Dispose();
        _debounceModelsTimer = new Timer(async _ =>
        {
            try
            {
                var (response, models, _) = await RepositoryManager.Model.GetModelsAsync(1, 10, searchTerm);
                if (response.IsSuccessStatusCode && models != null)
                {
                    tcs.SetResult(models);
                }
                else
                {
                    await InvokeAsync(() => Snackbar.Add("Failed to search models. Please try again.", Severity.Error));
                    tcs.SetResult(new List<ModelDto>());
                }
            }
            catch (Exception ex)
            {
                await InvokeAsync(() => Snackbar.Add($"Error searching models: {ex.Message}", Severity.Error));
                tcs.SetResult(new List<ModelDto>());
            }
        }, null, DebounceDelay, Timeout.Infinite);

        return await tcs.Task;
    }

    public void Dispose()
    {
        _debouncePartsTimer?.Dispose();
        _debounceCellsTimer?.Dispose();
        _debounceModelsTimer?.Dispose();
    }
}