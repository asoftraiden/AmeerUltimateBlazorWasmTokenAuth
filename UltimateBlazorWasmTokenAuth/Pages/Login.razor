@page "/login"

@inject HttpClient Http
@inject TokenAuthenticationStateProvider AuthStateProvider
@inject IAuthenticationService AuthenticationService;

@inject ILogger<Login> Logger

<div class="container col-6">
    @if (loginFailure)
    {
        <div class="alert alert-danger">Your credentials did not work. Please try again.</div>
    }
    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Login</h5>
            <EditForm Model="credentials" OnValidSubmit="SubmitCredentials">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Username</label>
                    <InputText class="form-control" @bind-Value="credentials.username" />
                    <ValidationMessage For="@(()=> credentials.username)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText type="password" class="form-control" @bind-Value="credentials.password" />
                    <ValidationMessage For="@(()=> credentials.password)" />
                    <br />
                </div>
                <button type="submit" class="btn btn-outline-primary btn-sm">
                    Submit 
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                </button>
            </EditForm>
        </div>
    </div>
</div>

@code {


    private DateTime? expiration;
    private string? errorMessage;
    private bool isLoading = false;
    
    UltimateBlazorWasmTokenAuth.Model.LoginCreds credentials = new UltimateBlazorWasmTokenAuth.Model.LoginCreds();
    bool loginFailure;
    EditForm loginform { get; set; }

    async Task SubmitCredentials()
    {

        try
        {
            isLoading = true;
            expiration = await AuthenticationService.LoginAsync(credentials);
            errorMessage = null;
        }
        catch (Exception ex)
        {
            expiration = null;
            errorMessage = ex.Message;
        }
        finally
        {

            isLoading = false;
        }
    }
}