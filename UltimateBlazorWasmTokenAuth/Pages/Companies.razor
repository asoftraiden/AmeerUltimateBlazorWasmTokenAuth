@page "/companies"
@inject TokenAuthenticationStateProvider TokenProvider
@inject IAuthenticationService AuthenticationService;
@inject IRepositoryManager repositoryManager

@attribute [Authorize]

<PageTitle>Companies</PageTitle>

<h1>Companies</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (companies == null)
{
    <p><em>Loading...</em></p>
    <p><em>@errorMessage</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                
                <th>Id</th>
                <th>Name</th>
                <th>Address</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in companies)
            {
                <tr>
                    <td>@forecast.Id</td>
                    <td>@forecast.Name</td>
                    <td>@forecast.FullAddress</td>
                    
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<CompanyDto>? companies;
    private HttpResponseMessage? message;
    private string errorMessage = "No Errors";
    private bool isLoading = false;


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            (message, companies) = await repositoryManager.Company.GetCompaniesAsync();

            if (!message.IsSuccessStatusCode)
            {
                errorMessage = $"Error occurred: {message.ReasonPhrase} (Status code: {message.StatusCode})";
                companies = null; // Ensure UI knows to show error message
            }


        }
        catch (Exception ex)
        {

            errorMessage = ex.Message;
            companies = null;
        }
        finally
        {
            isLoading = false;    
        }

        
    }










    // private CompanyDto[]? companies;

    // protected override async Task OnInitializedAsync()
    // {
    //     var token = await TokenProvider.GetTokenAsync();
    //     if (token != null)
    //     {
    //         Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
    //         //Http.DefaultRequestHeaders.Accept.Clear(); // Clears any existing Accept headers to ensure no conflicts
    //         Http.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json")); // Sets Accept header to application/json

    //         companies = await Http.GetFromJsonAsync<CompanyDto[]>("https://amqms.site/api/companies");
    //     }
    // }

    
}