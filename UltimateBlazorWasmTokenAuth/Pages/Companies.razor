@page "/companies"

@inject TokenAuthenticationStateProvider TokenProvider
@inject IAuthenticationService AuthenticationService
@inject IRepositoryManager repositoryManager
@inject IDialogService DialogService

@attribute [Authorize]

<PageTitle>Companies</PageTitle>

<MudText Typo="Typo.h4">Companies</MudText>
<br />
<br />
<NewCompany />
&nbsp;
@* <button class="btn btn-primary" @onclick="() => LoadData()">Refresh</button> *@
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenDialog">New</MudButton>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadData">Refresh</MudButton>

<br />

@if (isLoading)
{
    <MudProgressCircular Color="Color.Default" Size="Size.Medium" Indeterminate="true"  />
}
else if (companies == null)
{
    <p><em>@errorMessage</em></p>
}
else
{

    <style>
        .no-wrap {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .id-column {
            width: 100px !important;
            max-width: 100px !important;
        }
    </style>
    <br />
    <MudTable Items="companies" Dense="true" Hover="true" Striped="false" Bordered="true">
        <HeaderContent>
            <MudTh Class="id-column no-wrap">Id</MudTh>
            <MudTh>Name</MudTh>
            <MudTh>Address</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="id-column no-wrap" DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Address">@context.FullAddress</MudTd>
        </RowTemplate>
    </MudTable>

}




@code {
    private List<CompanyDto>? companies;
    private HttpResponseMessage? message;
    private string errorMessage = "";
    private bool isLoading = false;
    private bool isSavingCompany = false;
    private CompanyDto? createdCompany;
    private string saveCompanyErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;

        try
        {
            (message, companies) = await repositoryManager.Company.GetCompaniesAsync();

            if (!message.IsSuccessStatusCode)
            {
                errorMessage = $"Error occurred: {message.ReasonPhrase} (Status code: {message.StatusCode})";
                companies = null; // Ensure UI knows to show error message
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            companies = null;
        }
        finally
        {
            isLoading = false;
        }

    }


    private async Task OpenDialog()
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true,
                //DisableBackdropClick = true,
                NoHeader = false
            };
        var dialog = DialogService.Show<NewCompany>("New Company" , options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var newCompany = (CompanyForCreationDto)result.Data;
            try
            {
                isSavingCompany = true;
                (message, createdCompany) = await repositoryManager.Company.CreateCompanyAsync(newCompany);
               
            }
            catch (Exception ex)
            {
                saveCompanyErrorMessage = ex.Message;
            }
            finally
            {
                isLoading = false;
            }
        }
    }

}
