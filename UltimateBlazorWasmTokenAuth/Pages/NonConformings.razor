@page "/nonconformings"
@inject NavigationManager NavigationManager
@inject TokenAuthenticationStateProvider TokenProvider
@inject IAuthenticationService AuthenticationService
@inject IRepositoryManager repositoryManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

@* @attribute [Authorize(Roles = "Admin")]*@


<PageTitle>Non Conformings</PageTitle>
<MudText Typo="Typo.h4">Non Conformings</MudText>
<br />
<br />
<MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"/nonconforming"))">New</MudButton>
<MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="RefreshTable">Refresh</MudButton>

<br />

@if (nonConformings == null)
{
    if (errorMessage is null)
    {
        <MudProgressCircular Color="Color.Default" Size="Size.Medium" Indeterminate="true" />
    }
    else
    {
        <p><em>@errorMessage</em></p>
    }
}
else
{
    <style>
        .no-wrap {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .id-column {
            width: 100px !important;
            max-width: 100px !important;
        }
    </style>
    <br />
    <MudTable @ref="table" Items="nonConformings" Dense="true" Hover="true" Striped="false" Bordered="true"
              SortLabel="@SortLabel" SortDirection="@SortDirection"
              ServerData="LoadServerData">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Non Conformings</MudText>
            <MudSpacer />
            <MudTextField ValueChanged="@((string e) => OnValueChanged(e))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh Class="id-column no-wrap">Id</MudTh>
            <MudTh Class="id-column no-wrap"><MudTableSortLabel SortLabel="NcNumber" T="NonConformingDto">NC#</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Description" T="NonConformingDto">Description</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="DetectionDate" T="NonConformingDto">Detection Date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="Status" T="NonConformingDto">Status</MudTableSortLabel></MudTh>



            @* <MudTh><MudTableSortLabel SortLabel="Type" T="NonConformingDto">Type</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="QuantityAffected" T="NonConformingDto">Quantity</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="PartDescription" T="NonConformingDto">Part</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="CellDescription" T="NonConformingDto">Cell</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="ModelDescription" T="NonConformingDto">Model</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="DetectedBy" T="NonConformingDto">Detected By</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortLabel="RootCause" T="NonConformingDto">Root Cause</MudTableSortLabel></MudTh>*@
            <MudTh><MudTableSortLabel SortLabel="RequiresCustomerNotification" T="NonConformingDto">Customer Notification</MudTableSortLabel></MudTh> 
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd Class="id-column no-wrap" DataLabel="Id">
                <MudStack Row="true" Spacing="0" AlignItems="AlignItems.Center">
                    @if (copiedIds.Contains(context.Id))
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check"
                                 Color="Color.Default"
                                 Size="Size.Small" />
                    }
                    else
                    {
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.Filled.ContentCopy"
                                       OnClick="@(() => CopyToClipboard(context.Id))"
                                       Title="Copy ID" />
                    }
                </MudStack>
            </MudTd>
            <MudTd Class="no-wrap" DataLabel="NcNumber">@context.NcNumber</MudTd>
            <MudTd Class="no-wrap" DataLabel="Description">@context.Description</MudTd>
            <MudTd Class="no-wrap" DataLabel="DetectionDate">@context.DetectionDate.ToString("yyyy-MM-dd")</MudTd>
            <MudTd Class="no-wrap" DataLabel="Status">@context.Status</MudTd>



           @*  <MudTd Class="no-wrap" DataLabel="Type">@context.Type</MudTd>
            <MudTd Class="no-wrap" DataLabel="QuantityAffected">@context.QuantityAffected</MudTd>
            <MudTd Class="no-wrap" DataLabel="PartDescription">@context.PartDescription</MudTd>
            <MudTd Class="no-wrap" DataLabel="CellDescription">@context.CellDescription</MudTd>
            <MudTd Class="no-wrap" DataLabel="ModelDescription">@context.ModelDescription</MudTd>
            <MudTd Class="no-wrap" DataLabel="DetectedBy">@context.DetectedBy</MudTd>
            <MudTd Class="no-wrap" DataLabel="RootCause">@context.RootCause</MudTd>*@
            <MudTd Class="no-wrap" DataLabel="RequiresCustomerNotification">@context.RequiresCustomerNotification</MudTd>
            <MudTd Class="no-wrap">
                <MudStack Style="max-width: 150px;" Row="true" Spacing="2" AlignItems="AlignItems.End" Class="flex-sm-column flex-md-column flex-lg-row">
                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo($"/nonconforming/update/{context.Id}"))">Edit</MudButton>
                    <MudButton FullWidth="true" Size="Size.Small" Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => DeleteNonConforming(context.Id))">Delete</MudButton>
                </MudStack>
            </MudTd> 
        </RowTemplate>
        <PagerContent>
            <MudTablePager HorizontalAlignment="HorizontalAlignment.Center" />
        </PagerContent>
    </MudTable>
}

@code {
    private MudTable<NonConformingDto>? table;
    private List<NonConformingDto>? nonConformings;
    private HttpResponseMessage? message;
    private string? errorMessage = null;

    private readonly int CurrentPage = 0;
    private readonly int PageSize = 10;
    private string searchString = "";
    private string SortLabel { get; set; } = "NcNumber";
    private SortDirection SortDirection { get; set; } = SortDirection.Ascending;

    protected override async Task OnInitializedAsync()
    {
        var sortDir = SortDirection == SortDirection.Ascending ? "asc" : "desc";
        await LoadData(CurrentPage + 1, PageSize, null, SortLabel, sortDir);
    }

    private async Task<TableData<NonConformingDto>> LoadServerData(TableState state, CancellationToken cancellationToken)
    {
        var totalItems = await LoadData(
            state.Page + 1,
            state.PageSize,
            searchString,
            state.SortLabel,
            state.SortDirection == SortDirection.Ascending ? "asc" : "desc"
        );
        return new TableData<NonConformingDto>() { TotalItems = totalItems, Items = nonConformings };
    }

    private async Task RefreshTable()
    {
        await table.ReloadServerData();
    }

    private async Task<int> LoadData(int currentPage, int pageSize, string searchTerm, string sortBy, string sortOrder)
    {
        int totalItems = 0;
        try
        {
            var (response, ncList, paginationMetadata) = await repositoryManager.NonConforming.GetNonConformingsAsync(currentPage, pageSize, searchTerm, sortBy, sortOrder);
            if (response.IsSuccessStatusCode)
            {
                nonConformings = ncList;
                totalItems = paginationMetadata.TotalCount;
            }
            else
            {
                errorMessage = $"Error occurred: {message.ReasonPhrase} (Status code: {message.StatusCode})";
                nonConformings = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            nonConformings = null;
        }
        return totalItems;
    }

    private async Task OnValueChanged(object text)
    {
        searchString = text.ToString();
        await table.ReloadServerData();
    }

    private async Task DeleteNonConforming(Guid ncId)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Delete Non Conforming",
            "Are you sure you want to delete this non conforming?",
            yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            try
            {
                var (response, errors) = await repositoryManager.NonConforming.DeleteNonConformingAsync(ncId);
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Non conforming deleted successfully", Severity.Success);
                    await RefreshTable();
                }
                else
                {
                    if (errors != null && errors.Count > 0)
                    {
                        string errorMessage = string.Join("\n", errors.Select(kvp => $"- {kvp.Value}"));
                        Snackbar.Add($"Error:\n{errorMessage}", Severity.Error);
                    }
                    else
                    {
                        Snackbar.Add($"Error deleting non conforming: {response.ReasonPhrase}", Severity.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private HashSet<Guid> copiedIds = new();

    private async Task CopyToClipboard(Guid id)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", id.ToString());
        copiedIds.Add(id);
        StateHasChanged();
        await Task.Delay(1000);
        copiedIds.Remove(id);
    }
}